def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion Versions.compileSdkVersion
    buildToolsVersion Versions.buildToolsVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.koma.flutterdemo"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "default"
        multiDexEnabled true

        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "armeabi", "x86", "armeabi-v8a"
//            abiFilters 'armeabi-v7a'
        }

        dexOptions {
            javaMaxHeapSize "4g"
            maxProcessCount = 8
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    buildFeatures {
        dataBinding = true
    }

    //使用Kotlin实验特性
    androidExtensions {
        experimental = true
    }

    signingConfigs {
        calfkk {
            storeFile file("../xy.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }

        debug {//debug版签名配置
            storeFile file("../xy.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }
    }

    // 多渠道/多环境 的不同配置
    productFlavors {
        // ecus
        calfkk {
            applicationId "com.koma.flutterdemo"
            manifestPlaceholders = [
                    app_name    : "@string/app_name",
                    app_icon    : "@mipmap/playstore_icon",
//                    app_theme   : "@style/TKLaunchTheme",
                    PACKAGE_NAME: applicationId,
            ]
            signingConfig signingConfigs.calfkk
        }
    }

    // 批量打包
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                variant.getPackageApplication().outputDirectory = new File(getProjectDir().getAbsolutePath() + "/releaseApkFolder")
                outputFileName = "${variant.productFlavors[0].name}" +
                        "_V${defaultConfig.versionName}" +
                        "(${defaultConfig.versionCode})" +
                        "_${new Date().format("yyyy_MM_dd_HH_mm")}" +
                        "_release.apk"
            }
        }
    }

    buildTypes {
        release {
            // 是否进行混淆
            minifyEnabled true
            useProguard true
            // 开启zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗
            zipAlignEnabled true
            // 移除无用的resource文件：当ProGuard 把部分无用代码移除的时候，
            // 这些代码所引用的资源也会被标记为无用资源，然后
            // 系统通过资源压缩功能将它们移除。
            // 需要注意的是目前资源压缩器目前不会移除values/文件夹中
            // 定义的资源（例如字符串、尺寸、样式和颜色）
            // 开启后，Android构建工具会通过ResourceUsageAnalyzer来检查
            // 哪些资源是无用的，当检查到无用的资源时会把该资源替换
            // 成预定义的版本。主要是针对.png、.9.png、.xml提供了
            // TINY_PNG、TINY_9PNG、TINY_XML这3个byte数组的预定义版本。
            // 资源压缩工具默认是采用安全压缩模式来运行，可以通过开启严格压缩模式来达到更好的瘦身效果。
            shrinkResources true
            // 混淆文件的位置，其中 proguard-android.txt 为sdk默认的混淆配置，
            // 它的位置位于android-sdk/tools/proguard/proguard-android.txt，
            // 此外，proguard-android-optimize.txt 也为sdk默认的混淆配置，
            // 但是它默认打开了优化开关。并且，我们可在配置混淆文件将android.util.Log置为无效代码，
            // 以去除apk中打印日志的代码。而 proguard-rules.pro 是该模块下的混淆配置。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
        preDexLibraries = false
        additionalParameters = [
                '--multi-dex',//多分包
                '--set-max-idx-number=60000'//每个包内方法数上限
        ]
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation Deps.kotlinStdlib
}
