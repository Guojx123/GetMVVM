def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.koma.flutterdemo"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        compileSdkVersion Versions.compileSdkVersion
        buildToolsVersion Versions.buildToolsVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "default"
    }


    signingConfigs {
        demo {
            storeFile file("../xy.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }

        debug {//debug版签名配置
            storeFile file("../xy.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }
    }

    // 多渠道/多环境 的不同配置
    productFlavors {
        demo {
            applicationId "com.koma.flutterdemo"
            manifestPlaceholders = [
                    app_name    : "@string/app_name",
                    app_icon    : "@mipmap/playstore_icon",
                    PACKAGE_NAME: applicationId,
            ]
            signingConfig signingConfigs.demo
        }
    }

    // 批量打包
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                variant.getPackageApplication().outputDirectory = new File(getProjectDir().getAbsolutePath() + "/releaseApkFolder")
                outputFileName = "${variant.productFlavors[0].name}" +
                        "_V${defaultConfig.versionName}" +
                        "(${defaultConfig.versionCode})" +
                        "_${new Date().format("yyyy_MM_dd_HH_mm")}" +
                        "_release.apk"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
        preDexLibraries = false
        additionalParameters = [
                '--multi-dex',//多分包
                '--set-max-idx-number=60000'//每个包内方法数上限
        ]
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation Deps.kotlinStdlib
}
